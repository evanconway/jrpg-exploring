17th of November, 2024

Our first goal is to get the minimum features that a jrpg has. Which IMO is a top down world with a character you can move around, and the ability to start a battle sequence. We got a lot of experience changing game states with our point and click adventures. I'm confident I can copy the same system and apply it here. I wonder if it might be best to always require a specific updateable? Like the over world doesn't work unless you're updating the overworld updateable. We'll have to see how we want to handle things like drawing overworld assets while other logic is going on. 

Let's just get the camera setup, and a square we can move around with the arrow keys.

We've gotten the structure for a basic world, and a way to switch to a different updateable. Even though we could probably just start hacking away, we should probably think through the logic for how a battle will actually work. In most games I've played, battles are always turn based. And you're almost always either choosing an option for your turn, or waiting for some sort of attack animation to complete. That animation could be from you or your opponent. There are also messages to the player indicating what's about to happen or what did happen. None of these things seem to tricky to code on their own.

As I type this out, what feels the most complicated is determining what moments will happen in the battle after the player makes their selection. If it was truly just turn based then I'd be less concerned. We have the player make their decision, player whatever sequence they chose, then play whatever sequence we have the enemy choose. I'm not exactly sure how the actual battle data will be effected by this, but hopefully we can put that off for now. What I am concerned by is a more complex system. Imagine something like multiple party members, and multiple enemies. What if certain players had a speed attribute that let them take turns more frequently. How do we determine the order all things occur?

Actually I think it's worth thinking through battles on paper first, as if it was a card game. Then we make the animations based on how the paper battle works. Essentially we could look at battles as a turn based game, but the computer can run each turn instantly (from a numan perspective). So the only thing slowing down the battles is waiting for the human player to pick their turn.

Though, truly, the only thing that's actually kind of tricky here is deciding who gets to go when there are multiple players, (npc or otherwise), and figuring out how that's determined. We could do something like Chrono Trigger where there's a meter that fills up over time, and when a players meter is full they can take their turn. That elegantly accounts for the idea of varying speed between players. We also could do that same logic, but not display it visually like chrono trigger does.

We could still do a simple turned based system. In something like Earthbound, all player characters take their turn at the same time. Perhaps we could store up actions and decide what order they occur in based on enemy choices. Or maybe just keep it ultra simple and let all player choices occur in order, then have all enemy choices occur in order.

Regardless of what we choose, I think I've established something: we should keep a queue of actions to be processed. After each action is processed, we could determine if it's time to request player input or not. We could use either simple turn based or the speed system I mentioned earlier. Actually if it's turn based, we could just wait for the queue to be empty then just get all the next actions from the players and npcs. 

So maybe we should create a system that processes actions next, and worry about the turn structure later. This also brings me to consider some sort of event system. When making other games I often caught myself wishing I could just "trigger" specific moments, and always had to rig up some sort of hack to make them work which I later ripped out. Perhaps this could be our chance to build that system. I'm thinking something where events are an enum, but can be entered during game via a console to trigger them. That'll be our next thing to think about.

18th of November, 2024

I just realized this console idea may not work well without more infrastructure. I added a basic thing to detect key inputs but it doesn't block input checking for the rest of the app.

For now, we just won't have game inputs. We'll work with this console system to work out system kinks. I'm not worried about just hacking in some sort of input system later.
