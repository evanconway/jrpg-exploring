17th of November, 2024

Our first goal is to get the minimum features that a jrpg has. Which IMO is a top down world with a character you can move around, and the ability to start a battle sequence. We got a lot of experience changing game states with our point and click adventures. I'm confident I can copy the same system and apply it here. I wonder if it might be best to always require a specific updateable? Like the over world doesn't work unless you're updating the overworld updateable. We'll have to see how we want to handle things like drawing overworld assets while other logic is going on. 

Let's just get the camera setup, and a square we can move around with the arrow keys.

We've gotten the structure for a basic world, and a way to switch to a different updateable. Even though we could probably just start hacking away, we should probably think through the logic for how a battle will actually work. In most games I've played, battles are always turn based. And you're almost always either choosing an option for your turn, or waiting for some sort of attack animation to complete. That animation could be from you or your opponent. There are also messages to the player indicating what's about to happen or what did happen. None of these things seem to tricky to code on their own.

As I type this out, what feels the most complicated is determining what moments will happen in the battle after the player makes their selection. If it was truly just turn based then I'd be less concerned. We have the player make their decision, player whatever sequence they chose, then play whatever sequence we have the enemy choose. I'm not exactly sure how the actual battle data will be effected by this, but hopefully we can put that off for now. What I am concerned by is a more complex system. Imagine something like multiple party members, and multiple enemies. What if certain players had a speed attribute that let them take turns more frequently. How do we determine the order all things occur?

Actually I think it's worth thinking through battles on paper first, as if it was a card game. Then we make the animations based on how the paper battle works. Essentially we could look at battles as a turn based game, but the computer can run each turn instantly (from a numan perspective). So the only thing slowing down the battles is waiting for the human player to pick their turn.

Though, truly, the only thing that's actually kind of tricky here is deciding who gets to go when there are multiple players, (npc or otherwise), and figuring out how that's determined. We could do something like Chrono Trigger where there's a meter that fills up over time, and when a players meter is full they can take their turn. That elegantly accounts for the idea of varying speed between players. We also could do that same logic, but not display it visually like chrono trigger does.

We could still do a simple turned based system. In something like Earthbound, all player characters take their turn at the same time. Perhaps we could store up actions and decide what order they occur in based on enemy choices. Or maybe just keep it ultra simple and let all player choices occur in order, then have all enemy choices occur in order.

Regardless of what we choose, I think I've established something: we should keep a queue of actions to be processed. After each action is processed, we could determine if it's time to request player input or not. We could use either simple turn based or the speed system I mentioned earlier. Actually if it's turn based, we could just wait for the queue to be empty then just get all the next actions from the players and npcs. 

So maybe we should create a system that processes actions next, and worry about the turn structure later. This also brings me to consider some sort of event system. When making other games I often caught myself wishing I could just "trigger" specific moments, and always had to rig up some sort of hack to make them work which I later ripped out. Perhaps this could be our chance to build that system. I'm thinking something where events are an enum, but can be entered during game via a console to trigger them. That'll be our next thing to think about.

18th of November, 2024

I just realized this console idea may not work well without more infrastructure. I added a basic thing to detect key inputs but it doesn't block input checking for the rest of the app.

For now, we just won't have game inputs. We'll work with this console system to work out system kinks. I'm not worried about just hacking in some sort of input system later.

We started the transition for a battle, and realized we may need a system that can accomodate lots of different starting animations. As for the battles themselves. We'll definitely at least need the option for different backgrounds. We'll spend some time thinking about this later.

19th of November, 2024

We could try and create a number of console triggered actions for slide-show battles. Like Player Attack and Enemy Attack or something.

When I made the battle_start script I was worried because that one script isn't going to work for all the different kinds of battles. We'll need different things for backgrounds, start animations, that sort of thing. But it did occur to me that we could add a massive option object as the single argument for the battle_start script. Then allow for arguments in our console commands.

For some reason I'm mentally stuck on all the transition aspects of a slide-show battle. I'll probably want some sort of animation on the over-world that ultimately fades to black. Do I want some sort of animation for the enemy and player "appearing" in the battle? Similar to how pokemon has the enemy slide into frame from off screen. I think some Final Fantasy games have the enemies appear 1 by 1 at the start. How would I handle wanting different kinds of intro animations like this? I wonder if we need to make assets in the battle similar to world objects in that we can set their position and sprite via an updateable. I suppose we could write functions for different kinds of animation starts, give them names, and let that be a parameter in our console function.

Though, honestly, as I write this out, I'm being more confident that we can figure out all this stuff later. I'm pretty sure I'm just going to have a simple animation to start the fight, fade to black, then fade back with any enemies already in-frame. I think if we want something more complicated we can just add it in later.

So maybe next we should focus on how to store and manipulate stats like health, mana, or whatever. Because we'll definitely need that regardless of everything else.

Ah, one thing I do think we'll want is the ability to add enemies mid-fight. And of course we'll want to be able to remove enemies mid-fight. So maybe we should focus next on creating actions wich add, and remove enemies, and add the concept of health and the ability to change it. 

Now I'm stuck on how enemy position works on screen. Maybe we shouldn't worry about this yet, but it will come up later. To clarify, if a battle started with 1 enemy I'd want it to start center screen. If it started with 2 enemies I'd want it to start with them side-by-side and neither in the center. But if the battle started with 1 enemey in the center, but later another entered the battle, I'd want it to be to the side of the center enemy and the original enemy does not change position. This is basically how Earthbound works. And it wouldn't be hard to do this, but honestly I'm not sure if that's the behavior I'll ultimately want. So perhaps for now we'll just hack a crappy position system in and not worry about it. We'll change it later. 

I've changed my mind, I want to update the battle script right now. I want to be able to write custom start animations. We'll just have a default one for now. Note we may also need to make custom outro and victory animations. 

I was moving things around and noticed that I can change what function the update function of a struct is inside that very update function. We'll have to remember this as a possible way to organize logic. It might be better than using our steps[step] system.

Last thought for today. A battle is ultimately just numbers in an invisible spreadsheet changing while fun animations play. But I wonder should we have animations play in response to numbers changing, or should we trigger animations which themselves change the numbers? Something to think about until we come back to this.


23rd of November, 2024

I'm tempted to let animations trigger game value changes. There are a couple reasons for this. First, I think it'll be the easiest way. Second, I want potentially visible game values to change in time with the animations. And if we have animations occur in response to value changes, I have to figure out some sort of complex system where the UI shows the original value until certain moments in the animation. And third, if I decide to involve any sort of real time elements, like Earthbounds ticking down health system, then animations make more sense for that.

I'm going to try and put it a different way. In an action game we would have attack animations with hitboxes and hurtboxes moving around at different times to determine when game values changed. I think we can claim these slide-show battles are the same thing, it's just there are no hit or hurtboxes. We can very much think of them as attack animations that trigger value updates.

Next I think we should try and make console events for altering game values. This does bring up some questions. For example, should events happen immediately? Maybe some should happen immediately and others should get handled later. Also we don't have any character entities like players or enemies yet. Also how should we handle character deaths in this game? My gut says they should be like state-based-actions in MTG, where after an animation/action is complete the battle checks the game state and triggers its own animations. (Maybe we should call animations something other than animations since they do so much more than just show pretty pictures on the screen.) Actually, that's exactly how we should handle that. We'll store animations in a queue, and between processing each animation we'll check the state of the battle to determine what happens next. We could actually think of the player turn as an animation itself which simply gets put on in the queue. Though we'll have to play around with that.

Well regardless of all this, we definitely need the ability to have characters in the battle, and for them to be defeated. Otherwise all the other factors like changing health, mana, or whatever aren't going to be testable. We should make console commands for adding characters to a battle. I think this data could be stored in the battle itself rather than globally, except for player health. Actually, yes, I'd like our next feature to be the ability to add and remove enemy characters from a battle.

For positioning enemies, we may want to insist on a middle-center origin always.

I've noticed something while working on this. I want to change how battles start so that I can instantly start a battle from the console. I don't want to wait through the intro animation each time. But this does mean that we'll have to change how the intro animations work so that we can still draw the battle while also executing the intro animation. This is kind of weird because the intro animation will need access to the battle itself so it can decide when to draw the battle. 

To clarify the above, I'm specifically interested in the black fade outs. I don't want the battle to have a fade from black built into it. I think the intro animation should handle this. But of course if the intro animation is the current updateable, it needs access to the battle and its draw function so it can handle doing the fade from black.

But I just realized something, intro animation already have access to the battle so they can set the global.updateable when they're done. So we should be able to just move things around. Let's try that. 

Another thing I noticed, I want my console to be more modern. I don't like having to fully type these commands each time. I want to be able to tab auto complete text. I bet we can start hacking something in to fix this.

We were able to update our console to be more useable. The only thing missing now is arguments. As a next goal let's add some sort of message display system to battles. After that we can assess and probably start adding a basic attack.

Actually, I'm second guessing myself. The reason is because I'm not sure how I want the text messages to behave relative to the animations. For a basic attack animation I want to see the text appear at the top of the screen. It'll type out. After it's complete I want it to remain there while a smack or damage animation plays. Then I want the text to clear out and display the amount of damage done. Or maybe I'll want it to list the damage before the animation. Hmm, perhaps the text can be completely controlled by the animation. I'm just not sure if it should be an element of the battle, or perhaps something completely separate that animations control.

I just realized something, we could use the same logic we used for intro animations. We could create updateables that contain a reference to the battle and use the draw function of the battle inside that updateable. I'm almost wondering if our idea of the action queue system described earlier won't be necessary. Perhaps battles can just be a sequence of regular updateables which pass off the same battle object between them.

Ok I feel much better about messages, and the flow of battles in general now. Simply changing the updateable and maintaining a reference to the battle will work really well. It gives me plenty of flexibility.

Let's just get some thoughts down so we can reference them later:

BATTLE FLOW

A battle is merely an app state where the active updateable references a battle instance in some way. Presumeably we'll always invoke the battle draw function of that instance while this updateable is live but it's not a hard rule. We'll design battle updateables to always link back to the same instance. But that instance will immediately determine which updateable should be live next. The battle instance itself almost doesn't need to be an updateable.

I played a few other jrpgs briefly and realized most of them don't allow you to skip text for battle moments. In fact you don't appear to have any control over it. It shows up at the pace it wants, and leaves when it wants. I'm not sure yet if we want to copy that behavior.

I want to add attack animations next. This will force us to think through how to target enemies. I would like to have battles with multiple enemies of the same kind. I was considering copying the letter system Earthbound uses, where copies of the same kinds of enemies have A, B, C, etc. appended to their name. But maybe we can skip that if the indication of what enemy you're targeting is good enough. However, it occured to me that we'll probably play some sort of death animation immediately after an enemy health reaches 0. We need some way to track what enemy an attack is targetting, and right now the only thing I have is the index in the enemy array. But that won't work because enemies will be deleted from the array on death. So perhaps we just need to give enemies raw Ids. Let's just give them an increasing integer.

Let's try hacking that in next. Adding enemies also gives them an Id, which is just an increasing integer. Attacks will target enemies by Id. We'll play some sort of death animation for enemies once the attack animation is complete if their health is 0 or lower.

24th of November, 2024

We got a basic attack in. I noticed that we may want a more consistent way of displaying messages so that we can easily use them in different situations. Maybe make them their own kind of updateable with an update and draw function. Similar to how we use battles right now. The attack we made can't be reused for attacks with different animations though. I'm not yet convinced that's a bad thing because we may want very different logic for different attacks. I just wanted to note it.

Something that's bothering me is my reliance on frame count for timing things. I think I should go through and change all the updates so they use delta_time. Let's try and make messages easier to use and rework our update functions. Then I think we should finally add some sort of action select menu for battles.

Realized that for attacking to work we need a "choose target" menu which I'll need to think through.

Making a note as I make this menu. It ended up being more convenient to design all the functions so they accept a battle object. However, there's only ever going to be one battle object, and that's the active battle object. Perhaps we should rework these later to only use that same object.

Finally got something finished and working. My first observation is what I stated above. We should rework these functions that link to eachother so that there's only ever one globally referenced battle object. And all battle functions will reference that. It's messy trying to pass the object around. It's also not necessary since there will only ever be one battle happening at a time.

Let's just focus on cleaning that up, then we'll assess.

We've cleaned things up and the process for creating squences in battle feels clearer now. Though there are a still alot of things that will probably have to be reworked. A perfect example is the amount of damage dealt during an attack. There is zero logic there determining that, it's just a magic number right now.

I was going to write out all the things I'm not sure about. Perhaps the best thing is to figure out a better sense of direction for this. There's only so much practical work that can be done when we don't know exactly what we're making.

Perhaps it's time to mentally explore a vision. Something I've always thought would be cool is if you had different attacks that were more or less effective depending on the situation. It could be something extremely simple, like a rock/paper/scissors thing where once the player and enemy have queued up their actions, the attack that wins the rps battle is more effective. Or maybe outright nullifies the other attack. 

I would like the strategy and effectiveness of certain actions to feel more concrete than in other rgps I've played. I do think we need to keep a fair amount of that "slot machine" feel that jrpgs have. The randomness of attacks hitting or missing, and the amount of damage they do, is fun.

Maybe instead of exploring mechanics first we should explore the feel, and build mechanics that support it. More of a top down approach. Actually, given how my own mind seems to work. Perhaps I should try and think of a very specific scenario with a particular emotion, and build towards that. We could even think through it moment by moment. This is easier now since we have stronger control over things like cut-scenes. It may also be worth considering music first since it has such power over the emotion of a moment.

1st of December, 2024

No progress on mood or vibe to shoot for. Was thinking about starting battles randomly. Even if we don't commit to random starts, it's worth thinking through. We'll need zones that can start battles. My current instinct is to have the zones start battles based on player movement. Which means the zones will need to be aware of what the player is doing. I feel like it may be worth developing a complex event system, but we're no there yet. For now, let's redo the concept of world objects, and just custom code the world update loop just like we've done before. So for starters, we'll just have it update the player and battle start zones.

Got something simple working. Realized the battle zone could simply make a chance check any time the player moves to start a battle. We just use a really low percentage to make sure battles don't drag on too much. Also hacked in a simple time minimum between battles to keep things from getting repetitive. However these values are locked to individual battle zone instances for now. They should probably be universal.

Also quickly realized I'm not sure we should actually have truly random battle zones. It feels so interruptive. Would be worth exploring ideas like how Earthbound handles it. Though I don't want to have to draw that much. A generic sprite could work but it would have to be something that's very lore friendly. Needs thought.

Since battles are just created objects, we can modify them when they start. We can do this in the battle zones. Could probably also define rewards here if needed. Otherwise that can be determined when battles are over.

3rd of December, 2024

Some thoughts about story and how we could possibly organize this. I feel like I've got a good instinct for nailing a mood or feeling. So perhaps I could try to start the story by imagining an initial scenario with a very specific emotion. This might work well for acts in general. Or maybe I could think of it as defining acts with specific story beats that hit a specific emotion. Instead of starting ultra small with just 1 moment, I'd like to hit enough that we could build a story from them. So maybe 3? That would follow with a traditional western story of beginning, middle, climax.

I also want to make some notes about how I think stories work in games. A game is ultimately an interactive piece of software, so the user needs to have plenty of opportunities for interaction. However, in my opinion, the best stories are very strict. I don't like the idea of different endings, or different story beats the player can mess with. I think it would be valuable to view the story as something the player uncovers through play instead of something they are a part of. This is a tricky line to walk because obviously the player won't feel connected to the story if they can't change anything about it. I think it has to be a sort of illusion. Like a scavenger hunt for the missing pages of a book. You can find everything in your own way, and in the order you want, but the final story is the same result every time. This is a vague concept I'm not sure how to explain well. More of a feeling at the moment.
